import React from "react";
import styled, { keyframes } from "styled-components";
import { connect } from "react-redux";
import { getStores } from "../redux/actions/AuthActions";
import { getAuthURL } from "../env";
import Router from "next/router";
import { signOut } from "../redux/apis/AuthAPI";
import {
  Flex,
  Text,
  Box,
  Image,
  Icon,
  HyperLink,
} from "malta";

const fadeIn = keyframes`
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
`;

const fadeOut = keyframes`
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
`;

const slideIn = keyframes`
  0% {
    transform: translateX(600px);
  }
  100% {
    transform: translateX(0);
  }
`;


const slideOut = keyframes`
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(600px);
  }
`;


const Overlay = styled.div<any>`
  background: rgba(101, 103, 131, 0.25);
  z-index: 9010;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  animation: ${props => props.closing ? fadeOut : fadeIn} 0.25s ease-in-out 1 normal both;
`;

const Container = styled.div<any>`
  display: flex;
  flex-direction: column;
  align-items: center;
  position: fixed;
  z-index: 9020;
  background: #FAFAFC;
  border-radius: 4px 4px 4px 4px;
  box-shadow: 0 4px 10px 4px rgba(22,27,72,0.08);
  top: 16px;
  right: 16px;
  height: calc(100vh - 32px);
  width: 512px;
  animation: ${props => props.closing ? slideOut : slideIn} 0.5s cubic-bezier(0.3, 1, 0.32, 1) 1 normal both;
`;

const CardWrapper = styled(Flex)`
  flex-direction: column;
  width: calc(100% - 48px);
  padding: 8px 0 8px 0;
  background: #FFFFFF;
  box-shadow: 0 8px 32px 0 rgba(22,27,72,0.08);
`;

const ListItemWrapper = styled(Flex)`
  align-items: center;
  cursor: pointer;
  height: 60px;
  :hover {
    background: rgba(22,27,72, 0.03);
  }
`;

const ShopWrapper = styled(Flex)`
  background: #FFFFFF;
  align-items: center;
  position: relative;
  justify-content: center;
  border-radius: 4px 4px 0 0;
  box-shadow: 0 2px 8px 0 rgba(22,27,72,0.04), 0 8px 32px 0 rgba(22,27,72,0.08);
  height: 100px;
  width: 512px;
`;

const IconButton = styled(Flex)`
  width: 24px;
  height: 24px;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border-radius: 2px;
  :hover {
    path {
      fill: rgba(22,27,72,0.9);
  }
`;

const PanelPopupWrapper = styled<any>(Flex)`
  position: absolute;
  flex-direction: column;
  top: 92px;
  align-items: center;
  width: 400px;
  padding: 8px 0 8px 0;
  background: rgba(22,27,72,0.94);
  border-radius: 12px 12px 12px 12px;
  box-shadow: 0 8px 40px 0 rgba(22,27,72,0.40);
  animation: ${props => props.closing ? fadeOut : fadeIn} 0.25s ease-in-out 1 normal both;
  &:after {
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
    border-bottom: 10px solid rgba(22,27,72,0.94);
    content: "";
    position: absolute;
    display: block;
    top: -10px;
  }
`;

const PanelListItem = styled(Flex)`
  cursor: pointer;
  position: relative;
  align-items: center;
  width: 100%;
  :hover {
    background: #161B48;
  }
  transition: background 0.15s ease-out;
`;

const Divider = styled(Flex)`
  position: absolute;
  width: calc(100% - 64px);
  height: 0px;
  left: 32px;
  top: 72px;
  border-bottom: 1px solid rgba(255,255,255, 0.2);
`;

const AddShopPanel = (props) => {

  const addStore = () => {
    /* window.open(props.addStoreLink); */
    props.handleCloseAll();
  };

  return (
    <PanelListItem height="56px" justifyContent="center" onClick={addStore}>
      <Text demiLight color="rgba(255,255,255,0.4)">+ 쇼핑몰 추가하기</Text>
    </PanelListItem>
  );
};

const ShopPanelPopup = (props) => {
  return (
    <PanelPopupWrapper closing={props.closing}>
      {props.stores.map((v, i) =>
        <PanelListItem key={i} height="72px" onClick={() => { props.switchShop(i); props.handleCloseAll(); }}>
          <Box width="24px" height="24px" ml={3} mr={1}>
            <Icon name="home" fill="white.standard" scale={1} />
          </Box>
          <Text fontSize="20px" demiLight color="white.standard">{v.name}</Text>
          <Divider />
        </PanelListItem>
      )}
      <AddShopPanel addStoreLink={props.addStoreLink} handleCloseAll={props.handleCloseAll} />
    </PanelPopupWrapper>
  );
};

const ListItem = (props) => {
  return (
    <ListItemWrapper onClick={props.onClick}>
      <Box width="24px" height="24px" ml={3}>
        {props.renderIcon()}
      </Box>
      <Text demiLight ml={2} style={{ flexGrow: "1" }}>{props.label}</Text>
    </ListItemWrapper>
  );
};

const CatalogSetting = (props) => {
  return (
    <CardWrapper mt={props.mt}>
      <ListItem
        label="카탈로그 설정"
        onClick={props.handleSetting}
        renderIcon={() => <Image src="/static/images/img-logo-salesboost-basic.png" />}
      />
    </CardWrapper>
  );
};

const AuthSettings = (props) => {
  return (
    <CardWrapper mt={props.mt}>
      <ListItem
        label="쇼핑몰 설정"
        onClick={props.handleShopSetting}
        renderIcon={() => <Icon name="home" scale={1} fill="black.standard" />}
      />
      <ListItem
        label="개인 설정"
        onClick={props.handleAccountSetting}
        renderIcon={() => <Icon name="personal" scale={1} fill="black.standard" />}
      />
    </CardWrapper>
  );
};

const OtherSettings = (props) => {
  return (
    <CardWrapper mt={props.mt}>
      <ListItem
        label="카톡 문의하기"
        onClick={props.handleSupport}
        renderIcon={() => <Icon name="support" scale={1} fill="black.standard" />}
      />
      <ListItem
        label="로그아웃"
        onClick={props.handleLogout}
        renderIcon={() => <Icon name="logout" scale={1} fill="black.standard" />}
      />
    </CardWrapper>
  );
};

const AddStore = (props) => {
  return (
    <Flex flexDirection="column" mt="auto" mb={4} alignItems="center">
      <Text fontSize="h5" color="black.half" mb={1}>두 개 이상의 쇼핑몰을 운영하고 계신가요?</Text>
      <Text fontSize="h5" color="#23C1A6" hoverColor="#0EA58A" medium>
        <HyperLink style={{ color: "inherit", textDecoration: "none" }} href={props.addStoreLink}>다른 쇼핑몰 계정 추가하기</HyperLink>
      </Text>
    </Flex>
  );
};

const mapStateToProps = (state) => {
  return {
    stores: state.AuthReducer.stores,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    getStores: () => dispatch(getStores()),
  };
};

class ShopPanel extends React.Component<any, any> {

  state = {
    open: false,
    closing: false,
  };

  handleOpen = () => {
    this.setState({ open: true, closing: false });
  }

  handleClose = () => {
    this.setState({ ...this.state, closing: true });
    setTimeout(() => {
      this.setState({ open: false, closing: false });
    }, 500);
  }

  renderIconButton = () => {
    return (
      <IconButton ml="4px" onClick={this.state.open ? this.handleClose : this.handleOpen}>
        <Icon name={`arrow-${!this.state.open || this.state.closing ? "down" : "up"}`} scale={2 / 3} fill="rgba(22,27,72,0.6)" />
      </IconButton>
    );
  }

  render() {
    return (
      <ShopWrapper>
        <Box width="24px" height="24px">
          <Icon name="home" scale={1} fill="black.standard" />
        </Box>
        <Text medium fontSize="24px" mx={1}>{this.props.current}</Text>
        {this.props.stores.length !== 0 ?
          this.renderIconButton() : null}
        {this.state.open ?
          <ShopPanelPopup
            stores={this.props.stores}
            closing={this.state.closing}
            addStoreLink={this.props.addStoreLink}
            handleCloseAll={this.props.handleCloseAll}
            switchShop={this.props.switchShop}
            onClose={this.handleClose} />
          : null}
      </ShopWrapper>
    );
  }
}


export const Settings = connect(mapStateToProps, mapDispatchToProps)(class Settings extends React.Component<any, any> {
  state = {
    open: false,
    closing: false,
  };

  addStoreLink = "/";

  handleOpen = () => {
    this.props.getStores();
    this.setState({ open: true, closing: false });
  }

  handleClose = () => {
    this.setState({ ...this.state, closing: true });
    setTimeout(() => {
      this.setState({ open: false, closing: false });
    }, 500);
  }

  switchShop = (index) => {
    console.log("switch to", index);
  }

  private handleLogout = async () => {
    try {
      await signOut();
      window.location.reload();
    } catch (err) {
    }
  }

  render() {
    return (
      <>
        {this.props.renderButton(this.handleOpen)}
        {this.state.open ?
          <>
            <Overlay onClick={this.handleClose} closing={this.state.closing} />
            <Container closing={this.state.closing}>
              <ShopPanel
                switchShop={this.switchShop}
                current={this.props.currentShop}
                stores={this.props.stores.stores || []}
                addStoreLink={this.addStoreLink}
                handleCloseAll={this.handleClose} />
              <CatalogSetting
                mt={3}
                handleSetting={() => { Router.router.push("/settings/general"); this.handleClose(); }}
              />
              <AuthSettings mt={2}
                handleAccountSetting={() => { window.open(`${getAuthURL()}/settings/user`, "_blank"); this.handleClose(); }}
                handleShopSetting={() => { window.open(`${getAuthURL()}/settings/store`, "_blank"); this.handleClose(); }}
              />
              <OtherSettings mt={2}
                handleLogout={this.handleLogout}
                handleSupport={() => { window.open("https://pf.kakao.com/_hdZzC"); this.handleClose(); }}
              />
              {this.props.stores.length === 0 ? <AddStore addStoreLink={this.addStoreLink} /> : null}
            </Container>
          </>
          : null}
      </>
    );
  }
});
